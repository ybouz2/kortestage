{"ast":null,"code":"var _jsxFileName = \"/Users/kabood/Documents/editabletext-hoc/src/components/EditableText.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// class EditableText extends React.Component {\n//     render() {\n//         return (\n//         <div >\n//             <h1>Editable Text</h1>\n//             <p> \n//                 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt \n//                 ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco \n//                 laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit \n//                 in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \n//                 cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n//             </p>\n//         </div>\n//         );\n//     }\n// }\n// export default EditableText;\nimport React, { useState } from \"react\"; // Component accept text, placeholder values and also pass what type of Input - input, textarea so that we can use it for styling accordingly\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditableText = _ref => {\n  _s();\n\n  let {\n    text,\n    type,\n    placeholder,\n    children,\n    ...props\n  } = _ref;\n  // Manage the state whether to show the label or the input box. By default, label will be shown.\n  // Exercise: It can be made dynamic by accepting initial state as props outside the component \n  const [isEditing, setEditing] = useState(false); // Event handler while pressing any key while editing\n\n  const handleKeyDown = (event, type) => {// Handle when key is pressed\n  };\n  /*\n  - It will display a label is `isEditing` is false\n  - It will display the children (input or textarea) if `isEditing` is true\n  - when input `onBlur`, we will set the default non edit mode\n  Note: For simplicity purpose, I removed all the classnames, you can check the repo for CSS styles\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", { ...props,\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      onBlur: () => setEditing(false),\n      onKeyDown: e => handleKeyDown(e, type),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setEditing(true),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text || placeholder || \"Editable content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableText, \"tuiZ/XkP3IIihHgOqim00M9Cb2U=\");\n\n_c = EditableText;\nexport default EditableText;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableText\");","map":{"version":3,"names":["React","useState","EditableText","text","type","placeholder","children","props","isEditing","setEditing","handleKeyDown","event","e"],"sources":["/Users/kabood/Documents/editabletext-hoc/src/components/EditableText.js"],"sourcesContent":["// import React from \"react\";\n\n\n// class EditableText extends React.Component {\n\n    \n\n//     render() {\n//         return (\n            \n//         <div >\n//             <h1>Editable Text</h1>\n//             <p> \n//                 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt \n//                 ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco \n//                 laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit \n//                 in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \n//                 cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n//             </p>\n//         </div>\n//         );\n//     }\n// }\n\n// export default EditableText;\n\nimport React, { useState } from \"react\";\n\n// Component accept text, placeholder values and also pass what type of Input - input, textarea so that we can use it for styling accordingly\nconst EditableText = ({\n  text,\n  type,\n  placeholder,\n  children,\n  ...props\n}) => {\n  // Manage the state whether to show the label or the input box. By default, label will be shown.\n// Exercise: It can be made dynamic by accepting initial state as props outside the component \n  const [isEditing, setEditing] = useState(false);\n\n// Event handler while pressing any key while editing\n  const handleKeyDown = (event, type) => {\n    // Handle when key is pressed\n  };\n\n/*\n- It will display a label is `isEditing` is false\n- It will display the children (input or textarea) if `isEditing` is true\n- when input `onBlur`, we will set the default non edit mode\nNote: For simplicity purpose, I removed all the classnames, you can check the repo for CSS styles\n*/\n  return (\n    <section {...props}>\n      {isEditing ? (\n        <div\n          onBlur={() => setEditing(false)}\n          onKeyDown={e => handleKeyDown(e, type)}\n        >\n          {children}\n        </div>\n      ) : (\n        <div\n          onClick={() => setEditing(true)}\n        >\n          <span>\n            {text || placeholder || \"Editable content\"}\n          </span>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default EditableText;\n"],"mappings":";;;AAAA;AAGA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;;AACA,MAAMC,YAAY,GAAG,QAMf;EAAA;;EAAA,IANgB;IACpBC,IADoB;IAEpBC,IAFoB;IAGpBC,WAHoB;IAIpBC,QAJoB;IAKpB,GAAGC;EALiB,CAMhB;EACJ;EACF;EACE,MAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,KAAD,CAAxC,CAHI,CAKN;;EACE,MAAMS,aAAa,GAAG,CAACC,KAAD,EAAQP,IAAR,KAAiB,CACrC;EACD,CAFD;EAIF;AACA;AACA;AACA;AACA;AACA;;;EACE,oBACE,wBAAaG,KAAb;IAAA,UACGC,SAAS,gBACR;MACE,MAAM,EAAE,MAAMC,UAAU,CAAC,KAAD,CAD1B;MAEE,SAAS,EAAEG,CAAC,IAAIF,aAAa,CAACE,CAAD,EAAIR,IAAJ,CAF/B;MAAA,UAIGE;IAJH;MAAA;MAAA;MAAA;IAAA,QADQ,gBAQR;MACE,OAAO,EAAE,MAAMG,UAAU,CAAC,IAAD,CAD3B;MAAA,uBAGE;QAAA,UACGN,IAAI,IAAIE,WAAR,IAAuB;MAD1B;QAAA;QAAA;QAAA;MAAA;IAHF;MAAA;MAAA;MAAA;IAAA;EATJ;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CA1CD;;GAAMH,Y;;KAAAA,Y;AA4CN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}